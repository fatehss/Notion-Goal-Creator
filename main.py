from app.client import parse_goals_subgoals_tasks, create_page_tree, trash_pages

if __name__ == "__main__":
    # create_page("Task", "Some random task asdfasdf", "1b48041cec6680db84eee61e1506c57b")
    input = f"""
I want to create an application that transforms a set of pdfs into a quiz. The main functionality of the application will be allowing the users on the frontend to take a quiz in the form of several questions. The questions on the quiz will be AI generated by some backend system and stored in mongodb. On the frontend, there will be an option to upload a set of documents to generate the quiz. My stack will be nextjs on the frontend and for the backend fastapi served by uvicorn using a langgraph agent to generate the quizzes. I will use mongodb as the database. Can you break this overall project into subgoals and tasks where there is a one to many relationship between subgoals and tasks
ChatGPT said:
Certainly! Hereâ€™s your project broken down systematically into subgoals and their corresponding tasks:

Subgoal 1: Project Setup & Initialization
Tasks:
Initialize Next.js project with required dependencies (Axios or fetch, form handling libraries).
Set up FastAPI backend and configure Uvicorn server.
Create MongoDB database and collections (e.g., quizzes, questions, users).
Establish MongoDB connection using motor or pymongo.
Subgoal 2: PDF Upload and Storage
Tasks:
Design frontend component in Next.js to handle PDF uploads (file input or drag-and-drop).
Implement API route in FastAPI to receive uploaded PDFs.
Store PDF files temporarily or permanently (cloud or local storage, e.g., AWS S3 or local filesystem).
Record PDF metadata (filename, upload timestamp, user) in MongoDB.
Subgoal 3: PDF Processing & Extraction
Tasks:
Implement backend logic using libraries like PyMuPDF, PyPDF2, or pdfplumber to parse PDF documents.
Extract text content and structure data clearly.
Handle PDF errors (empty files, encrypted files, corrupted files).
Store extracted text in MongoDB associated with document metadata.
Subgoal 4: Quiz Generation via AI (LangGraph Integration)
Tasks:
Set up LangGraph with desired models (OpenAI or similar).
Create a LangGraph agent configured specifically for quiz/question generation.
Implement logic for generating meaningful quiz questions from extracted text.
Store generated questions (with metadata such as question text, answers, difficulty level) in MongoDB.
Subgoal 5: Quiz Management and CRUD Operations
Tasks:
Create CRUD APIs in FastAPI for quizzes and questions (Create, Read, Update, Delete).
Ensure security and validation of quiz/question data.
Implement pagination, filtering, and searching of quiz questions in API.
Design database schema in MongoDB to efficiently handle quiz metadata and questions.
Subgoal 6: Frontend Quiz Interface & Interaction
Tasks:
Design interactive quiz-taking UI (questions display, options selection, scoring) using Next.js.
Fetch quiz questions from FastAPI backend using REST APIs.
Implement state management to handle user responses and quiz navigation (e.g., Zustand, Redux, or React's useState/useReducer).
Create result display (scores, feedback) upon quiz completion.
Subgoal 7: User Management and Authentication (Optional but Recommended)
Tasks:
Implement user registration and login functionality (NextAuth or custom JWT-based solution).
Secure APIs with authentication middleware.
Manage user-specific quizzes and track user progress/scores.
Store user information securely in MongoDB.
Subgoal 8: Deployment & CI/CD Pipeline
Tasks:
Dockerize frontend and backend for containerized deployment.
Set up continuous integration/deployment pipeline (GitHub Actions, Docker Hub, AWS, Vercel, etc.).
Deploy frontend application (Next.js) on Vercel or similar hosting platform.
Deploy backend application (FastAPI) with Uvicorn via cloud infrastructure (AWS EC2, Heroku, Render, etc.).
Subgoal 9: Testing & Quality Assurance
Tasks:
Implement backend API testing using pytest and FastAPI TestClient.
Set up frontend testing with Jest/React Testing Library for Next.js components.
Conduct end-to-end tests (Cypress or Playwright).
Perform usability testing and gather feedback to iterate UI/UX improvements.
Subgoal 10: Monitoring & Maintenance
Tasks:
Integrate monitoring and logging solutions (Sentry, Datadog, Grafana).
Configure alerts and error tracking.
Schedule regular database backups.
Plan for ongoing updates and scalability (resource optimization, caching, etc.).
"""
    
    response = parse_goals_subgoals_tasks(input)
    pages = create_page_tree(response)
    trash_pages(pages)